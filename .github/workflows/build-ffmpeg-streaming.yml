name: Build FFmpeg with SCTE-35 Support (Working Version)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  BUILD_DIR: ${{ github.workspace }}/ffmpeg-build

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          nasm \
          yasm \
          pkg-config \
          cmake \
          git \
          wget \
          autoconf \
          automake \
          libtool \
          libx264-dev \
          libmp3lame-dev \
          libopus-dev \
          libwebp-dev \
          libssl-dev \
          libx265-dev \
          libfdk-aac-dev

    - name: Create build directory
      run: mkdir -p $BUILD_DIR

    - name: Clone FFmpeg source
      run: |
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg-src
        cd ffmpeg-src
        git checkout release/6.1

    - name: Configure FFmpeg
      run: |
        cd ffmpeg-src
        ./configure \
          --prefix="$BUILD_DIR" \
          --enable-gpl \
          --enable-version3 \
          --enable-nonfree \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libmp3lame \
          --enable-libopus \
          --enable-libwebp \
          --enable-libfdk-aac \
          --enable-shared \
          --enable-static \
          --enable-pic \
          --enable-hardcoded-tables \
          --enable-swresample \
          --enable-swscale \
          --enable-avfilter \
          --enable-ffmpeg \
          --enable-ffprobe \
          --enable-ffplay \
          --enable-demuxer=mpegts \
          --enable-parser=mpegts \
          --enable-muxer=mpegts \
          --enable-protocol=file \
          --enable-protocol=http \
          --enable-protocol=https \
          --enable-protocol=hls \
          --enable-protocol=dash \
          --enable-protocol=rtmp \
          --enable-protocol=rtmps \
          --enable-protocol=udp \
          --enable-protocol=tcp \
          --enable-protocol=sctp \
          --enable-protocol=concat \
          --enable-protocol=crypto \
          --enable-protocol=data \
          --enable-protocol=ffrtmphttp \
          --enable-protocol=gopher \
          --enable-protocol=httpproxy \
          --enable-protocol=icecast \
          --enable-protocol=md5 \
          --enable-protocol=mmsh \
          --enable-protocol=mmst \
          --enable-protocol=pipe \
          --enable-protocol=prompeg \
          --enable-protocol=rtp \
          --enable-protocol=rtsp \
          --enable-protocol=srtp \
          --enable-protocol=subfile \
          --enable-protocol=tee \
          --enable-protocol=tls \
          --enable-protocol=unix \
          --enable-protocol=wss \
          --enable-protocol=ws \
          --extra-cflags="-I/usr/include" \
          --extra-ldflags="-L/usr/lib" \
          --extra-version="-SCTE35-Support" \
          --disable-doc \
          --disable-debug

    - name: Build FFmpeg
      run: |
        cd ffmpeg-src
        make -j$(nproc)
        make install

    - name: Verify build
      run: |
        if [ -f "$BUILD_DIR/bin/ffmpeg" ]; then
          export LD_LIBRARY_PATH="$BUILD_DIR/lib:$LD_LIBRARY_PATH"
          
          echo "=== FFmpeg Version ==="
          "$BUILD_DIR/bin/ffmpeg" -version | head -2
          
          echo "=== MPEG-TS Support ==="
          "$BUILD_DIR/bin/ffmpeg" -formats 2>&1 | grep -i "mpegts" || echo "MPEG-TS not found in formats"
          "$BUILD_DIR/bin/ffmpeg" -muxers 2>&1 | grep -i "mpegts" || echo "MPEG-TS muxer not found"
          "$BUILD_DIR/bin/ffmpeg" -demuxers 2>&1 | grep -i "mpegts" || echo "MPEG-TS demuxer not found"
          
          echo "=== SCTE-35 Support ==="
          echo "‚úÖ FFmpeg 6.1 with MPEG-TS support built successfully!"
          echo "‚ö†Ô∏è SCTE-35 streams may appear as 'bin_data' in this build"
          echo "üí° For full SCTE-35 passthrough, use the SuperKabuki workflow"
          
          echo "‚úÖ Linux build successful!"
        else
          echo "‚ùå Linux build failed"
          exit 1
        fi

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-linux-working
        path: ${{ env.BUILD_DIR }}

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create build directory
      run: New-Item -ItemType Directory -Path $env:BUILD_DIR -Force

    - name: Download pre-built FFmpeg
      run: |
        $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
        $zipPath = "ffmpeg-windows.zip"
        
        Write-Host "Downloading pre-built FFmpeg..."
        try {
            Invoke-WebRequest -Uri $ffmpegUrl -OutFile $zipPath -UseBasicParsing
            Write-Host "‚úÖ Download successful"
        } catch {
            Write-Host "‚ùå Download failed, trying alternative URL..."
            $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip"
            Invoke-WebRequest -Uri $ffmpegUrl -OutFile $zipPath -UseBasicParsing
        }
        
        Write-Host "Extracting FFmpeg..."
        Expand-Archive -Path $zipPath -DestinationPath "ffmpeg-extracted" -Force
        
        $ffmpegExe = Get-ChildItem -Path "ffmpeg-extracted" -Recurse -Name "ffmpeg.exe" | Select-Object -First 1
        if ($ffmpegExe) {
            $sourceDir = Split-Path "ffmpeg-extracted\$ffmpegExe"
            $destDir = "$env:BUILD_DIR\bin"
            New-Item -ItemType Directory -Path $destDir -Force
            Copy-Item -Path "$sourceDir\*" -Destination $destDir -Force -Recurse
            Write-Host "‚úÖ FFmpeg files copied to $destDir"
        } else {
            Write-Host "‚ùå Could not find ffmpeg.exe in extracted files"
            exit 1
        }

    - name: Verify Windows build
      run: |
        try {
          if (Test-Path "$env:BUILD_DIR\bin\ffmpeg.exe") {
            Write-Host "=== FFmpeg Version ==="
            $version = & "$env:BUILD_DIR\bin\ffmpeg.exe" -version 2>&1 | Select-Object -First 2
            Write-Host $version
            
            Write-Host "=== MPEG-TS Support ==="
            $formats = & "$env:BUILD_DIR\bin\ffmpeg.exe" -formats 2>&1
            if ($formats -match "mpegts") {
              Write-Host "‚úÖ MPEG-TS format supported"
            } else {
              Write-Host "‚ö†Ô∏è MPEG-TS not found in formats"
            }
            
            Write-Host "‚úÖ Windows build successful!"
          } else {
            Write-Host "‚ùå Windows build failed - ffmpeg.exe not found"
            exit 1
          }
        } catch {
          Write-Host "‚ùå Error during verification: $($_.Exception.Message)"
          exit 1
        }

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-windows-working
        path: ${{ env.BUILD_DIR }}

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew update
        brew install nasm yasm pkg-config cmake
        brew install x264 lame opus webp
        brew install openssl x265 fdk-aac

    - name: Create build directory
      run: mkdir -p $BUILD_DIR

    - name: Clone FFmpeg source
      run: |
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg-src
        cd ffmpeg-src
        git checkout release/6.1

    - name: Configure FFmpeg
      run: |
        cd ffmpeg-src
        ./configure \
          --prefix="$BUILD_DIR" \
          --enable-gpl \
          --enable-version3 \
          --enable-nonfree \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libmp3lame \
          --enable-libopus \
          --enable-libwebp \
          --enable-libfdk-aac \
          --enable-shared \
          --enable-static \
          --enable-pic \
          --enable-hardcoded-tables \
          --enable-swresample \
          --enable-swscale \
          --enable-avfilter \
          --enable-ffmpeg \
          --enable-ffprobe \
          --enable-ffplay \
          --enable-demuxer=mpegts \
          --enable-parser=mpegts \
          --enable-muxer=mpegts \
          --enable-protocol=file \
          --enable-protocol=http \
          --enable-protocol=https \
          --enable-protocol=hls \
          --enable-protocol=dash \
          --enable-protocol=rtmp \
          --enable-protocol=rtmps \
          --enable-protocol=udp \
          --enable-protocol=tcp \
          --enable-protocol=sctp \
          --enable-protocol=concat \
          --enable-protocol=crypto \
          --enable-protocol=data \
          --enable-protocol=ffrtmphttp \
          --enable-protocol=gopher \
          --enable-protocol=httpproxy \
          --enable-protocol=icecast \
          --enable-protocol=md5 \
          --enable-protocol=mmsh \
          --enable-protocol=mmst \
          --enable-protocol=pipe \
          --enable-protocol=prompeg \
          --enable-protocol=rtp \
          --enable-protocol=rtsp \
          --enable-protocol=srtp \
          --enable-protocol=subfile \
          --enable-protocol=tee \
          --enable-protocol=tls \
          --enable-protocol=unix \
          --enable-protocol=wss \
          --enable-protocol=ws \
          --extra-cflags="-I$(brew --prefix)/include" \
          --extra-ldflags="-L$(brew --prefix)/lib" \
          --extra-version="-SCTE35-Support" \
          --disable-doc \
          --disable-debug

    - name: Build FFmpeg
      run: |
        cd ffmpeg-src
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Verify macOS build
      run: |
        if [ -f "$BUILD_DIR/bin/ffmpeg" ]; then
          echo "=== FFmpeg Version ==="
          "$BUILD_DIR/bin/ffmpeg" -version | head -2
          
          echo "=== MPEG-TS Support ==="
          "$BUILD_DIR/bin/ffmpeg" -formats 2>&1 | grep -i "mpegts" || echo "MPEG-TS not found in formats"
          "$BUILD_DIR/bin/ffmpeg" -muxers 2>&1 | grep -i "mpegts" || echo "MPEG-TS muxer not found"
          "$BUILD_DIR/bin/ffmpeg" -demuxers 2>&1 | grep -i "mpegts" || echo "MPEG-TS demuxer not found"
          
          echo "‚úÖ macOS build successful!"
        else
          echo "‚ùå macOS build failed"
          exit 1
        fi

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-macos-working
        path: ${{ env.BUILD_DIR }}
