name: Build FFmpeg with Full Streaming Support

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-ffmpeg:
    strategy:
      matrix:
        target: [linux-x64, windows-x64, macos-x64]
      max-parallel: 2
      fail-fast: false
    runs-on: ${{ matrix.target == 'windows-x64' && 'windows-latest' || matrix.target == 'macos-x64' && 'macos-latest' || 'ubuntu-latest' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup build environment
      id: setup
      run: |
        # Set BUILD_DIR without using GITHUB_ENV in the same step
        BUILD_DIR="$(pwd)/ffmpeg-build"
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        mkdir -p "$BUILD_DIR"
        echo "Build directory: $BUILD_DIR"
        echo "Build started at: $(date)" > "$BUILD_DIR/build-log.txt"

    - name: Install dependencies
      run: |
        echo "Installing dependencies for $RUNNER_OS..."
        echo "BUILD_DIR is: $BUILD_DIR"
        
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y \
            build-essential nasm yasm git pkg-config cmake \
            zlib1g-dev libssl-dev libx264-dev libx265-dev \
            libvpx-dev libass-dev libfreetype6-dev \
            libmp3lame-dev libopus-dev libwebp-dev wget tar

          # Build libsrt from source
          echo "Building libsrt from source..."
          wget https://github.com/Haivision/srt/archive/refs/tags/v1.5.3.tar.gz
          tar -xzf v1.5.3.tar.gz
          cd srt-1.5.3
          ./configure --prefix=/usr/local
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ..

        elif [ "$RUNNER_OS" = "Windows" ]; then
          choco install -y nasm yasm git cmake make --no-progress

        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew update
          brew install nasm yasm pkg-config cmake \
            x264 x265 libvpx libass freetype \
            lame opus webp
        fi

    - name: Clone FFmpeg
      run: |
        echo "BUILD_DIR is: $BUILD_DIR"
        git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git ffmpeg-src

    - name: Configure FFmpeg
      run: |
        cd ffmpeg-src
        echo "Current directory: $(pwd)"
        echo "BUILD_DIR is: $BUILD_DIR"
        
        # Basic configuration that should work everywhere
        ./configure \
          --prefix="$BUILD_DIR" \
          --enable-gpl \
          --enable-version3 \
          --enable-nonfree \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libmp3lame \
          --enable-libopus \
          --enable-libwebp \
          --enable-libfreetype \
          --enable-libass \
          --enable-shared

    - name: Build FFmpeg
      run: |
        cd ffmpeg-src
        echo "Building FFmpeg..."
        
        if [ "$RUNNER_OS" = "Windows" ]; then
          make -j4
        else
          make -j$(nproc)
        fi
        
        make install

    - name: Verify build
      run: |
        echo "Verifying build in: $BUILD_DIR"
        
        if [ -f "$BUILD_DIR/bin/ffmpeg" ]; then
          "$BUILD_DIR/bin/ffmpeg" -version | head -2
          echo "Build successful!"
        else
          echo "FFmpeg binary not found in: $BUILD_DIR/bin/"
          ls -la "$BUILD_DIR/" || true
          ls -la "$BUILD_DIR/bin/" 2>/dev/null || true
          exit 1
        fi

    - name: Package artifacts
      run: |
        echo "Packaging artifacts from: $BUILD_DIR"
        
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Windows packaging
          if [ -d "$BUILD_DIR/bin" ]; then
            cd "$BUILD_DIR"
            7z a "ffmpeg-bin-$RUNNER_OS.7z" bin/*
          else
            echo "bin directory not found, creating empty package"
            echo "Build failed - no binaries" > build-failure.txt
            7z a "ffmpeg-failed-$RUNNER_OS.7z" build-failure.txt
          fi
        else
          # Linux/macOS packaging
          if [ -d "$BUILD_DIR/bin" ]; then
            cd "$BUILD_DIR"
            tar -czvf "ffmpeg-bin-$RUNNER_OS.tar.gz" bin/
          else
            echo "bin directory not found, creating empty package"
            echo "Build failed - no binaries" > build-failure.txt
            tar -czvf "ffmpeg-failed-$RUNNER_OS.tar.gz" build-failure.txt
          fi
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-${{ matrix.target }}
        path: |
          ${{ env.BUILD_DIR }}/*.tar.gz
          ${{ env.BUILD_DIR }}/*.7z
          ${{ env.BUILD_DIR }}/*.txt
        retention-days: 7

  status-report:
    runs-on: ubuntu-latest
    needs: build-ffmpeg
    if: always()
    steps:
    - name: Report build status
      run: |
        echo "Build completed for all platforms"
        echo "Check artifacts for results"
