name: Build FFmpeg with Full Streaming Support

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]

env:
  BUILD_RETRIES: 2
  TIMEOUT_MINUTES: 90

jobs:
  build-ffmpeg:
    strategy:
      matrix:
        target: [linux-x64, windows-x64, macos-x64]
      max-parallel: 2
      fail-fast: false
    runs-on: ${{ matrix.target == 'windows-x64' && 'windows-latest' || matrix.target == 'macos-x64' && 'macos-latest' || 'ubuntu-latest' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup build environment
      id: setup
      run: |
        echo "BUILD_DIR=$(pwd)/ffmpeg-build" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=ffmpeg-streaming-${{ matrix.target }}" >> $GITHUB_ENV
        mkdir -p "$BUILD_DIR"
        echo "Build started at: $(date)" > "$BUILD_DIR/build-log.txt"

    - name: Install dependencies
      id: install-deps
      timeout-minutes: 20
      run: |
        echo "Installing dependencies for $RUNNER_OS..."
        
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y \
            build-essential nasm yasm git pkg-config cmake autoconf automake libtool \
            zlib1g-dev libssl-dev librtmp-dev libx264-dev libx265-dev \
            libvpx-dev libaom-dev libdav1d-dev libass-dev libfreetype6-dev \
            libfribidi-dev libharfbuzz-dev libmp3lame-dev libopus-dev \
            libvorbis-dev libwebp-dev libzmq3-dev libssh-dev wget tar

          # Build libsrt from source
          echo "Building libsrt from source..."
          SRT_VERSION="1.5.3"
          wget https://github.com/Haivision/srt/archive/refs/tags/v${SRT_VERSION}.tar.gz
          tar -xzf v${SRT_VERSION}.tar.gz
          cd srt-${SRT_VERSION}
          ./configure --prefix=/usr/local
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ..

        elif [ "$RUNNER_OS" = "Windows" ]; then
          choco install -y nasm yasm git cmake make 7zip --no-progress

        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew update
          brew install nasm yasm pkg-config cmake srt rtmpdump \
            x264 x265 libvpx aom dav1d libass freetype harfbuzz \
            lame opus libvorbis webp libssh
        fi

    - name: Clone FFmpeg
      run: |
        git clone --depth 1 --branch release/6.1 https://git.ffmpeg.org/ffmpeg.git ffmpeg-src

    - name: Configure FFmpeg
      id: configure
      run: |
        cd ffmpeg-src
        
        if [ "$RUNNER_OS" = "Linux" ]; then
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        fi

        # Try with SCTE35 first, then without if it fails
        CONFIG_FLAGS="--prefix=$BUILD_DIR --enable-gpl --enable-version3 --enable-nonfree \
          --enable-libsrt --enable-librtmp --enable-libx264 --enable-libx265 \
          --enable-libmp3lame --enable-libopus --enable-libvpx --enable-libaom \
          --enable-libass --enable-libfreetype --enable-libwebp --enable-shared"

        if ./configure $CONFIG_FLAGS --enable-scte35 2>> "$BUILD_DIR/configure-errors.txt"; then
          echo "scte35_enabled=true" >> $GITHUB_OUTPUT
          echo "Configured with SCTE35 support"
        else
          echo "SCTE35 not available, configuring without it..."
          if ./configure $CONFIG_FLAGS 2>> "$BUILD_DIR/configure-errors.txt"; then
            echo "scte35_enabled=false" >> $GITHUB_OUTPUT
            echo "Configured without SCTE35"
          else
            echo "Configuration failed completely"
            cat "$BUILD_DIR/configure-errors.txt"
            exit 1
          fi
        fi

    - name: Build FFmpeg
      timeout-minutes: ${{ env.TIMEOUT_MINUTES }}
      run: |
        cd ffmpeg-src
        
        if [ "$RUNNER_OS" = "Windows" ]; then
          make -j4
        else
          make -j$(nproc)
        fi
        
        make install

    - name: Verify build
      run: |
        echo "=== BUILD VERIFICATION ==="
        
        if [ -f "$BUILD_DIR/bin/ffmpeg" ]; then
          "$BUILD_DIR/bin/ffmpeg" -version | head -2
          echo "=== STREAMING PROTOCOLS ==="
          "$BUILD_DIR/bin/ffmpeg" -protocols | grep -E "(srt|rtmp|http)" || true
          echo "Build successful!"
        else
          echo "FFmpeg binary not found!"
          exit 1
        fi

    - name: Package artifacts (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        if [ -d "$BUILD_DIR/bin" ]; then
          cd "$BUILD_DIR"
          tar -czvf "$ARTIFACT_NAME-bin.tar.gz" bin/
          tar -czvf "$ARTIFACT_NAME-logs.tar.gz" *.txt
        else
          echo "Build directory not found, packaging logs only"
          cd "$(dirname "$BUILD_DIR")"
          tar -czvf "$ARTIFACT_NAME-logs-only.tar.gz" ffmpeg-build/*.txt 2>/dev/null || true
        fi

    - name: Package artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path "$env:BUILD_DIR\bin") {
          cd "$env:BUILD_DIR"
          7z a "$env:ARTIFACT_NAME-bin.7z" bin\*
          7z a "$env:ARTIFACT_NAME-logs.7z" *.txt
        } else {
          echo "Build directory not found, packaging logs only"
          cd (Split-Path "$env:BUILD_DIR" -Parent)
          7z a "$env:ARTIFACT_NAME-logs-only.7z" ffmpeg-build\*.txt 2>$null
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: |
          ${{ env.BUILD_DIR }}/*.tar.gz
          ${{ env.BUILD_DIR }}/*.7z
          ${{ env.BUILD_DIR }}/*.txt
        retention-days: 7

    - name: Create success release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.BUILD_DIR }}/*-bin.*
        tag_name: build-${{ matrix.target }}-${{ github.run_number }}
        name: FFmpeg Streaming Build - ${{ matrix.target }}
        body: |
          FFmpeg built with streaming support
          Platform: ${{ matrix.target }}
          SCTE35: ${{ steps.configure.outputs.scte35_enabled || 'unknown' }}
          Build: ${{ github.run_number }}

  status-report:
    runs-on: ubuntu-latest
    needs: build-ffmpeg
    if: always()
    steps:
    - name: Report build status
      run: |
        echo "Build status for all platforms:"
        echo "Linux: ${{ needs.build-ffmpeg.outputs['linux-x64'].result || 'skipped' }}"
        echo "Windows: ${{ needs.build-ffmpeg.outputs['windows-x64'].result || 'skipped' }}"
        echo "macOS: ${{ needs.build-ffmpeg.outputs['macos-x64'].result || 'skipped' }}"
