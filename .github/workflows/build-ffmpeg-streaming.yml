name: Build FFmpeg with SCTE35 Support

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 */7 * *'  # Build every 7 days

env:
  FFMPEG_VERSION: "latest"

jobs:
  build-linux-scte35:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        BUILD_DIR="$GITHUB_WORKSPACE/ffmpeg-scte35-linux"
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        mkdir -p "$BUILD_DIR"
        echo "Build directory: $BUILD_DIR"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          nasm \
          yasm \
          git \
          pkg-config \
          cmake \
          autoconf \
          automake \
          libtool \
          zlib1g-dev \
          libssl-dev \
          libx264-dev \
          libx265-dev \
          libvpx-dev \
          libaom-dev \
          libdav1d-dev \
          libass-dev \
          libfreetype6-dev \
          libfribidi-dev \
          libharfbuzz-dev \
          libmp3lame-dev \
          libopus-dev \
          libvorbis-dev \
          libwebp-dev \
          libzmq3-dev \
          libssh-dev \
          wget \
          tar \
          curl

    - name: Clone and build libsrt
      run: |
        echo "Building libsrt from source..."
        SRT_VERSION="1.5.3"
        wget https://github.com/Haivision/srt/archive/refs/tags/v${SRT_VERSION}.tar.gz
        tar -xzf v${SRT_VERSION}.tar.gz
        cd srt-${SRT_VERSION}
        ./configure --prefix=/usr/local --enable-shared --enable-static
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ..

    - name: Clone FFmpeg with SCTE35 patches
      run: |
        # Clone main FFmpeg
        git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git ffmpeg-src
        cd ffmpeg-src
        
        # Try to find a branch/commit with SCTE35 support
        git fetch --tags
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo "FFMPEG_VERSION=$LATEST_TAG" >> $GITHUB_ENV
        
        # Check if SCTE35 is available in this version
        if ./configure --help | grep -q "scte35"; then
          echo "SCTE35 support detected in FFmpeg"
          echo "SCTE35_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "SCTE35 not available in main FFmpeg, trying alternative approaches..."
          echo "SCTE35_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Apply SCTE35 patches (if needed)
      if: env.SCTE35_AVAILABLE == 'false'
      run: |
        echo "Attempting to apply SCTE35 patches..."
        cd ffmpeg-src
        
        # Try to find and apply SCTE35 patches
        # Note: This is a placeholder - actual patches would need to be sourced
        # from FFmpeg mailing lists or broadcasting communities
        
        echo "Checking for available SCTE35 implementations..."
        
        # Alternative: Use a fork with SCTE35 support
        cd ..
        rm -rf ffmpeg-src
        git clone https://github.com/quietvoid/FFmpeg.git ffmpeg-src
        cd ffmpeg-src
        git checkout scte35 2>/dev/null || git checkout main
        
        echo "Using alternative FFmpeg source for SCTE35"

    - name: Configure FFmpeg with SCTE35
      run: |
        cd ffmpeg-src
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        
        # Base configuration
        CONFIG_FLAGS="--prefix=$BUILD_DIR --enable-gpl --enable-version3 --enable-nonfree"
        
        # Streaming protocols
        CONFIG_FLAGS="$CONFIG_FLAGS --enable-libsrt --enable-librtmp"
        
        # Codecs
        CONFIG_FLAGS="$CONFIG_FLAGS --enable-libx264 --enable-libx265 --enable-libvpx --enable-libaom"
        CONFIG_FLAGS="$CONFIG_FLAGS --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libwebp"
        CONFIG_FLAGS="$CONFIG_FLAGS --enable-libass --enable-libfreetype --enable-libfribidi --enable-libharfbuzz"
        
        # Try to enable SCTE35
        if ./configure --help | grep -q "scte35"; then
          CONFIG_FLAGS="$CONFIG_FLAGS --enable-scte35"
          echo "Configuring with SCTE35 support"
        else
          echo "SCTE35 option not available, configuring without it"
        fi
        
        # Additional flags
        CONFIG_FLAGS="$CONFIG_FLAGS --enable-shared --enable-static --enable-pic"
        CONFIG_FLAGS="$CONFIG_FLAGS --enable-hardcoded-tables --enable-runtime-cpudetect"
        
        echo "Configuration flags: $CONFIG_FLAGS"
        ./configure $CONFIG_FLAGS

    - name: Build FFmpeg
      timeout-minutes: 45
      run: |
        cd ffmpeg-src
        make -j$(nproc)
        make install

    - name: Verify SCTE35 support
      run: |
        echo "=== VERIFYING SCTE35 SUPPORT ==="
        
        if [ -f "$BUILD_DIR/bin/ffmpeg" ]; then
          # Check version
          "$BUILD_DIR/bin/ffmpeg" -version | head -3
          
          # Check MPEG-TS muxer for SCTE35 options
          echo "=== MPEG-TS MUXER OPTIONS ==="
          "$BUILD_DIR/bin/ffmpeg" -h muxer=mpegts | grep -i scte || echo "No SCTE35 options found in MPEG-TS muxer"
          
          # Check if SCTE35 bitstream filter is available
          echo "=== BITSTREAM FILTERS ==="
          "$BUILD_DIR/bin/ffmpeg" -bsfs | grep -i scte || echo "No SCTE35 bitstream filters found"
          
          # Check protocols
          echo "=== STREAMING PROTOCOLS ==="
          "$BUILD_DIR/bin/ffmpeg" -protocols | grep -E "(srt|rtmp|http)"
          
          # Try to use SCTE35 if available
          if "$BUILD_DIR/bin/ffmpeg" -h muxer=mpegts | grep -q -i scte; then
            echo "✅ SCTE35 support appears to be available!"
            echo "SCTE35_STATUS=available" >> $GITHUB_ENV
          else
            echo "⚠️  SCTE35 support not detected in MPEG-TS muxer"
            echo "SCTE35_STATUS=unavailable" >> $GITHUB_ENV
          fi
        else
          echo "❌ FFmpeg binary not found"
          exit 1
        fi

    - name: Create test SCTE35 script
      run: |
        cat > "$BUILD_DIR/test-scte35.sh" << 'EOF'
#!/bin/bash
# SCTE35 Test Script
echo "Testing SCTE35 capabilities..."
FFMPEG="./bin/ffmpeg"

if [ -f "$FFMPEG" ]; then
    # Check MPEG-TS SCTE35 options
    echo "=== MPEG-TS SCTE35 OPTIONS ==="
    $FFMPEG -h muxer=mpegts 2>&1 | grep -i scte
    
    # Check if we can create a simple TS with potential SCTE35 support
    echo "=== BASIC TEST ==="
    echo "Testing basic MPEG-TS creation..."
    
    # Create a test video
    $FFMPEG -f lavfi -i testsrc=duration=10:size=1280x720:rate=30 \
            -f lavfi -i sine=frequency=1000:duration=10 \
            -c:v libx264 -preset fast -b:v 1M \
            -c:a aac -b:a 128k \
            -y test_output.ts
            
    echo "Test file created: test_output.ts"
    ls -la test_output.ts
else
    echo "FFmpeg not found"
fi
EOF
        chmod +x "$BUILD_DIR/test-scte35.sh"

    - name: Package Linux build with SCTE35
      run: |
        cd "$BUILD_DIR"
        tar -czvf "ffmpeg-scte35-linux-x64.tar.gz" bin/ test-scte35.sh
        echo "FFmpeg version: $FFMPEG_VERSION" > version.txt
        echo "SCTE35 support: $SCTE35_STATUS" >> version.txt
        echo "Build date: $(date)" >> version.txt
        echo "Platform: Linux x64" >> version.txt

    - name: Upload Linux SCTE35 artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-scte35-linux
        path: |
          ${{ env.BUILD_DIR }}/ffmpeg-scte35-linux-x64.tar.gz
          ${{ env.BUILD_DIR }}/version.txt

  build-windows-scte35:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        $buildDir = "$pwd\ffmpeg-scte35-windows"
        echo "BUILD_DIR=$buildDir" | Out-File -FilePath $env:GITHUB_ENV -Append
        New-Item -ItemType Directory -Path $buildDir -Force

    - name: Install dependencies
      run: |
        choco install -y nasm yasm git make --no-progress

    - name: Clone FFmpeg
      run: |
        git clone https://github.com/quietvoid/FFmpeg.git ffmpeg-src
        cd ffmpeg-src
        git checkout scte35 2>$null || git checkout main

    - name: Configure FFmpeg
      run: |
        cd ffmpeg-src
        ./configure `
          --prefix="$env:BUILD_DIR" `
          --enable-gpl `
          --enable-version3 `
          --enable-nonfree `
          --enable-libx264 `
          --enable-libmp3lame `
          --enable-libopus `
          --toolchain=msvc `
          --arch=x86_64

    - name: Build FFmpeg
      run: |
        cd ffmpeg-src
        make -j4
        make install

    - name: Package Windows build
      run: |
        cd "$env:BUILD_DIR"
        7z a "ffmpeg-scte35-windows-x64.7z" bin\
        echo "FFmpeg with SCTE35 attempt" > version.txt
        echo "Build date: $(Get-Date)" >> version.txt

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-scte35-windows
        path: ${{ env.BUILD_DIR }}/ffmpeg-scte35-windows-x64.7z

  # Alternative approach: Use pre-built SCTE35 tools
  scte35-tools:
    runs-on: ubuntu-latest
    steps:
    - name: Install SCTE35 tools
      run: |
        # Install tsduck for SCTE35 manipulation
        wget https://github.com/tsduck/tsduck/releases/download/v3.32-3252/tsduck_3.32-3252_amd64.deb
        sudo dpkg -i tsduck_3.32-3252_amd64.deb || sudo apt-get install -f -y
        
        # Install other SCTE35 tools
        sudo apt-get install -y python3-pip
        pip3 install scte35-threefive
        
        # Create tools package
        mkdir -p scte35-tools
        echo "SCTE35 Tools:" > scte35-tools/README.txt
        echo "- TSduck: https://tsduck.io/" >> scte35-tools/README.txt
        echo "- threefive: https://github.com/futzu/scte35-threefive" >> scte35-tools/README.txt
        echo "- FFmpeg patched versions" >> scte35-tools/README.txt
        
        tar -czvf scte35-tools-linux.tar.gz scte35-tools/

    - name: Upload SCTE35 tools
      uses: actions/upload-artifact@v4
      with:
        name: scte35-tools
        path: scte35-tools-linux.tar.gz

  create-scte35-release:
    runs-on: ubuntu-latest
    needs: [build-linux-scte35, build-windows-scte35, scte35-tools]
    if: always()
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts

    - name: Create comprehensive release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./release-artifacts/ffmpeg-scte35-linux/ffmpeg-scte35-linux-x64.tar.gz
          ./release-artifacts/ffmpeg-scte35-windows/ffmpeg-scte35-windows-x64.7z
          ./release-artifacts/scte35-tools/scte35-tools-linux.tar.gz
        tag_name: scte35-build-${{ github.run_number }}
        name: FFmpeg with SCTE35 Support
        body: |
          # FFmpeg with SCTE35 Support
          
          ## ⚠️ Important Note about SCTE35
          SCTE35 support in FFmpeg is complex and often requires:
          - Custom patches to FFmpeg
          - Specific FFmpeg versions
          - Broadcasting-focused builds
          
          ## 📦 Included in this release:
          - FFmpeg builds with SCTE35 patches attempted
          - SCTE35 manipulation tools (TSduck)
          - Documentation and test scripts
          
          ## 🔧 Recommended Alternatives:
          1. **Use TSduck** for SCTE35 operations alongside FFmpeg
          2. **Professional FFmpeg builds** from broadcasting vendors
          3. **Cloud services** with SCTE35 support (AWS Elemental, etc.)
          
          ## 📋 Build Status:
          - Linux: ${{ needs.build-linux-scte35.result }}
          - Windows: ${{ needs.build-windows-scte35.result }}
          - SCTE35 Tools: ${{ needs.scte35-tools.result }}
          
          Build: ${{ github.run_number }}

  final-report:
    runs-on: ubuntu-latest
    needs: [build-linux-scte35, build-windows-scte35, scte35-tools]
    if: always()
    steps:
    - name: SCTE35 build status report
      run: |
        echo "=== SCTE35 BUILD STATUS ==="
        echo "Linux SCTE35 build: ${{ needs.build-linux-scte35.result }}"
        echo "Windows SCTE35 build: ${{ needs.build-windows-scte35.result }}"
        echo "SCTE35 tools: ${{ needs.scte35-tools.result }}"
        echo "==========================="
        echo ""
        echo "💡 For reliable SCTE35 support, consider:"
        echo "1. Using TSduck (included in tools)"
        echo "2. Professional FFmpeg builds from vendors"
        echo "3. Cloud-based SCTE35 solutions"
